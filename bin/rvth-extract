#!/usr/bin/python3
""" rvth-extract
Pull resources from the DATA partition on some RVT-H image.

Experimental. 
"""

from sys import argv
from struct import pack, unpack
from enum import Enum
from hexdump import hexdump
from os import mkdir, makedirs
from os.path import exists

class PartType(Enum):
    DATA = 0
    UPDATE = 1
    CHANNEL = 2

BASE_PATH = "/tmp/dump/"
if (not exists(BASE_PATH)):
    makedirs(BASE_PATH)

parts = []
with open(argv[1], "rb") as f:

    # Read partition table data
    f.seek(0x40000)
    num_part = unpack(">L", f.read(4))[0]
    part_table_off = unpack(">L", f.read(4))[0] << 2
    print("[*] {} partitions, table offset @ {:08x}".format(num_part, part_table_off))

    # Read partition entries
    f.seek(part_table_off)
    for i in range(0, num_part):
        part_off = unpack(">L", f.read(4))[0] << 2
        part_type = unpack(">L", f.read(4))[0]
        if (part_type == 0):
            parts.append({ 'off': part_off, 'type': PartType(part_type) })

    # Parse each partition
    for p in parts:
        poff = p['off']
        print("[*] Partition at {:08x}, type={}".format(poff, p['type'].name))

        # Read in ticket data
        f.seek(poff)
        p['ticket'] = f.read(0x2a4)

        p['tmd_len'] = unpack(">L", f.read(4))[0]
        p['tmd_off'] = unpack(">L", f.read(4))[0] << 2
        p['cert_chain_len'] = unpack(">L", f.read(4))[0]
        p['cert_chain_off'] = unpack(">L", f.read(4))[0] << 2
        p['h3_off'] = unpack(">L", f.read(4))[0] << 2
        p['data_off'] = unpack(">L", f.read(4))[0] << 2
        data_off = p['data_off']
        p['data_len'] = unpack(">L", f.read(4))[0] << 2

        print("[*]\t TMD data\t {:08x} (len={:08x})".format(p['tmd_off'], p['tmd_len']))
        print("[*]\t Partition data\t {:08x} (len={:08x})".format(p['data_off'], p['data_len']))

        # Read in TMD data
        f.seek(poff + p['tmd_off'])
        tmd_data = f.read(p['tmd_len'])

        # Read in boot.bin and bi2.bin
        f.seek(poff + p['data_off'] + 0x420)
        boot_data = f.read(0x20)
        bi2_data = f.read(0x40)

        # Parse boot.bin
        main_dol_off, fst_off, fst_len, max_fst_len= unpack(">LLLL", 
                boot_data[:0x10])
        main_dol_off = main_dol_off << 2
        fst_off = fst_off << 2
        fst_len = fst_len << 2

        # Read the main.dol
        print("[*]\t Main DOL\t {:08x}".format(main_dol_off))
        #f.seek(poff + p['data_off'] + main_dol_off)

        # Parse the FST
        print("[*]\t FST\t\t {:08x} (len={:08x})".format(fst_off, fst_len))
        f.seek(poff + p['data_off'] + fst_off)
        fst_data = f.read(fst_len)
        
        fst_ents = []
        fst_cur = 0x18
        num_ents = (unpack(">L", fst_data[0x08:0x0c])[0]) - 2
        string_base = 0x18 + (num_ents * 0xc)

        # Loop over all file entries in the FST
        for idx in range(0, num_ents):
            entry = fst_data[fst_cur:fst_cur+0x0c]
            isdir = True if entry[0:1] == b'\x01' else None
            name_off = unpack(">L", b'\x00' + entry[0x01:0x04])[0]
            off = unpack(">L", entry[0x04:0x08])[0]
            size = unpack(">L", entry[0x08:0x0c])[0]
            name_sz = 0

            # Get the filename
            while True:
                string_head = string_base + name_off
                string_tail = string_base + name_off + name_sz
                b = fst_data[string_head:string_tail]
                if (len(b) > 1):
                    if (b[-1] == 0): break
                name_sz += 1

            name = fst_data[string_head:string_tail - 1]
            name = name.decode('utf-8')
            fst_ents.append({'name': name, 'off': off, 'size': size, 'dir': isdir})
            fst_cur += 0xc

        # Dump all the files
        indent = 0
        dir_end_idx = 0xffffffff
        depth = 0
        path = []
        for idx, e in enumerate(fst_ents):
            off = e['off']
            size = e['size']
            name = e['name']
            isdir = e['dir']

            if (idx >= dir_end_idx): 
                depth = depth - 1
                del path[-1:]

            if (isdir): 
                path.append(name+"/")
                dir_end_idx = size -2

            filename = BASE_PATH
            for p in path:
                filename += p
            if (isdir):
                makedirs(filename)
                print("[!]\t\t{:04x} {}{}".format(idx,'  '*depth,filename))
            else:
                filename += name
                print("[!]\t\t{:04x} {}{}".format(idx,'  '*depth,filename))
                of_off = (off << 2) + poff + data_off
                f.seek(of_off)
                of_data = f.read(size)
                with open(filename, "wb") as of:
                    of.write(of_data)

            if (isdir): 
                depth = depth + 1


