#!/usr/bin/python3
""" freeblocks
Rudimentary script for Wii SFFS/FAT free block analysis.
"""

import argparse
from os.path import expanduser, exists
from os import mkdir, makedirs
from hexdump import hexdump
from struct import pack, unpack
from io import BytesIO as bio
from Crypto.Cipher import AES
import json

SFFS_MAGIC          = b'SFFS'

PAGEMETA_LEN        = 0x040
PAGEDATA_LEN        = 0x800
PAGE_LEN            = 0x840
CLUSTER_LEN         = PAGE_LEN * 8

BLOCK_LAST          = 0xfffb
BLOCK_RESERVED      = 0xfffc
BLOCK_BAD           = 0xfffd
BLOCK_FREE          = 0xfffe

data = bytearray()


def get_cluster_data(cidx):
    buf = bytearray()
    for i in range(0, 8):
        base = (CLUSTER_LEN * cidx) + (i * PAGE_LEN)
        tail = base + 0x800
        buf += data[base:tail]
    return buf


class FAT(object):
    """ Object representing an SFFS file allocation table """
    def __lt__(self, x):
        """ We want to order FAT objects by the generation number """
        return self.gen < x.gen

    def __init__(self, off, data):
        assert len(data) == 0x1000c
        self.offset = off
        self.data = data
        self.magic = unpack(">L", data[0x00:0x04])[0]
        self.gen = unpack(">L", data[0x04:0x08])[0]

        # Generate a list of blocks in this FAT
        self.block = []
        cur = 0x0c
        for i in range(0, 0x8000):
            self.block.append(unpack(">H", data[cur:cur+0x2])[0])
            cur += 0x2
        assert len(self.block) == 0x8000

        # Generate list of various interesting blocks
        self.free_blocks = []
        for idx, block in enumerate(self.block):
            if (self.block[idx] == BLOCK_FREE): 
                self.free_blocks.append(idx)


# -----------------------------------------------------------------------------
# Helper functions

def dump(data, lvl):
    """ Hexdump some bytearray with indentation """
    indent = '\t' * lvl
    for line in hexdump(data, result='generator'):
        print("{}{}".format(indent, line))


# -----------------------------------------------------------------------------
# Handle arguments

DEFAULT_NAND_KEY = expanduser("~/.wii/nand-key")
parser = argparse.ArgumentParser(description='Wii NAND freeblock analysis')
parser.add_argument('nand_bin', help="input NAND dump")
parser.add_argument('out_dir', help="output directory")
parser.add_argument('-k', '--nand-key', default=DEFAULT_NAND_KEY, help="NAND key file")
args = parser.parse_args()

# Make output directory
if (not exists(args.out_dir)):
    makedirs(args.out_dir)

# Read NAND key material
with open(args.nand_key, "rb") as f:
    NAND_KEY = f.read()

# Read the entire NAND dump into memory
with open(args.nand_bin, "rb") as f:
    print("[*] Reading NAND dump at {} ...".format(args.nand_bin))
    data = f.read()


# -----------------------------------------------------------------------------

# FIXME: Only search high pages to avoid false positives
# Search through NAND and find the file-allocation tables (should be 16?).

fat_list = []
cur = 0

print("[*] Searching for FATs ...")
while (cur < len(data)):
    cur = data.find(SFFS_MAGIC, cur)
    if (cur == -1): break
    print("\tSFFS entry @ {:08x}".format(cur))
    fat = FAT(cur, data[cur:cur + 0x1000c])
    fat_list.append(fat)
    cur += len(SFFS_MAGIC)

# Enforce ordering of FATs in this list by the generation number (this makes 
# it kinda easier to deal with reasoning about things changing through time).
# Then, naively annotate the history of the FAT over the last 16 generations.

fat_list.sort()

inital_freeblocks = fat_list[0].free_blocks
print("[*] gen={:04x}: num_free={:04x}".format(fat_list[0].gen, len(inital_freeblocks)))

for fat in fat_list:
    cur_freeblocks = fat.free_blocks
    if (cur_freeblocks != inital_freeblocks):
        print("[*] gen={:04x}: num_free={:04x} ({:+04x} blocks cumulative)".format(fat.gen, 
            len(cur_freeblocks), (len(cur_freeblocks) - len(inital_freeblocks))))
    else:
        print("[*] gen={:04x}: num_free={:04x}".format(fat.gen, len(cur_freeblocks)))

    prev_freeblocks = cur_freeblocks

# Get a list of each generation's free blocks, then compute the set of common 
# free blocks between all of the FATs we have access to here.
# This set of free blocks must be older than the past 16 generations.

free_lists = []
for fat in fat_list:
    free_lists.append(set(fat.free_blocks))

common_free_list = list(set.intersection(*free_lists))

groups = [[common_free_list[0]]]
for i in range(1, len(common_free_list)):
    if (common_free_list[i - 1] + 1 == common_free_list[i]):
        groups[-1].append(common_free_list[i])
    else:
        groups.append([common_free_list[i]])

free_regions = []
for group in groups:
    x = {'idx': group[0], 'len': len(group)}
    free_regions.append(x)
#print(json.dumps(free_regions, indent=2))

iv = bytearray(b'\x00' * 0x10)
aes = AES.new(NAND_KEY, AES.MODE_CBC, iv=iv)
#raw_data = aes.decrypt(data[cur:])


#print(hexdump(get_cluster_data(0x7f00)))


for reg in free_regions:
    buf = bytearray()
    cbase = reg['idx']
    cnum = reg['len']
    for i in range(0, cnum):
        buf += get_cluster_data(cbase + i)
    reg['decbuf'] = aes.decrypt(buf)

print("There are {} free regions".format(len(free_regions)))
#print(hexdump(free_regions[9]['decbuf']))

for reg in free_regions:
    filename = args.out_dir + "/" + "{:04x}_{:04x}.bin".format(reg['idx'], reg['len'])
    with open(filename, "wb") as f:
        f.write(reg['decbuf'])
    print("[*] Wrote {:08x} bytes to {}".format(len(reg['decbuf']), filename))
