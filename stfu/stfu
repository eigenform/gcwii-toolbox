#!/usr/bin/python3
""" stfu - STarlet FUzzer

   This place is a message...  
   and part of a system of messages ...
   pay attention to it!

                   Sending this message was important to us. 
               We considered ourselves to be a powerful culture.

                                      This place is not a place of honor ...  
                             no highly esteemed deed is commemorated here... 
                                                     nothing valued is here.
"""


from binascii import hexlify, unhexlify
from struct import pack, unpack
from sys import argv

from libstfu.core import *

if (len(argv) < 3):
    print("usage: {} <ARM binary> <NAND dump>".format(argv[0]))
    exit()

# Create an instance of the emulator
emu = Starlet()
stfu_register_sigint_handler(emu)

# Example: a full system configuration requires the following:
#   - A NAND dump
#   - An OTP memory dump
#   - A copy of the boot ROM (boot0)

emu.load_boot0("boot0.bin")
emu.load_nand(argv[2])
emu.load_otp("otp.bin")

# Example: pre-configure memory and/or machine state
#emu.write16(0x0d403d94, 0x4770) # skyeye boot1 sleep() patch

# Example: add breakpoints/logging to certain code regions
#emu.add_code_logrange(0x0d400000, 0x0d402000)
#emu.add_code_logrange(0x00000000, 0x00030000)
#emu.add_code_logrange(0xffff2000, 0xffffffff)

#emu.add_mem_logrange(0x0d410000, 0x0d420000)
#emu.add_breakpoint(0xfff00000)

# Example: load and start an arbitrary binary at some address
# You can also load symbols to annotate logging/disassembly
#emu.load_code(argv[1], 0x0d400000)
#emu.load_symbols("boot1c.csv")

# Start emulation
emu.run()

